
En este fichero se recogerán las modificaciones/aportaciones que se hacen a este proyecto; así como en el environment para que se pueda repetir en un futuro.

1. Instalado python3 y la librería numpy.
2. Es necesario anhadir la ruta de numpy /home/... al archivo settings.json para que vscode no de warnnings.
3. No es lo mismo ejecutar sudo perf stat python3 ... que perf python3 ... | ya no sólo por el poder conseguir medir más cosas como root. Sino que al instalar las librerias de pip3, es necesario instalarlas como root.
4. No lo he hecho, pero se puede evitar lo anterior creando un grupo
5. Para comprobar los registros, instalo rdmsr (msr-tools)
sudo perf stat --event instructions,cycles,fp_arith_inst_retired.128b_packed_double,fp_arith_inst_retired.128b_packed_single,fp_arith_inst_retired.256b_packed_double,fp_arith_inst_retired.256b_packed_single,fp_arith_inst_retired.scalar_double,fp_arith_inst_retired.scalar_single,fp_assist.any python3 mat_mul.py

6. Instalo toplev
7. He hecho dos programas de mat_mul: uno que tiene matrices a 0 y otro con matrices de valores random (no los genera, usa lo que hay en mem.) y la diferencia es muy pequeña con un dim_matrix = 5k.
8. Instalar matplotlib para graficas de tlev. Es mejor, desde el dir. de toplev-> sudo pip3 install requirements.txt
9. Importante, si ejecuto toplev e instalo los componentes con python3, entonces tengo que cambiar la cabecera de toplev.py e indicar que use python3

-------------------------------------------------------------------------------

10. Descargo PAPI: git clone https://bitbucket.org/icl/papi.git
    Problemas con permisos. Es necesario ejecutar el siguiente comando para poder realizar la instalación: sudo sysctl -w kernel.perf_event_paranoid=1
    Con ello bajamos de 4 (default) a 1. Aún ejecutando con root no iba.
11. Genero un fichero en C para probar las funcionalidades de papi.
# sudo sysctl -w kernel.perf_event_paranoid=1 -> lo tengo que bajar a 1 para poder ejecutar el programa??
12. IMPORTANTE. Es necesario ejecutar los programas, compilados con papi, con sudo.
13. Lista de errores de papi https://icl.cs.utk.edu/papi/docs/d7/d40/group__ret__codes.html -> Hay eventos que aparece que existen pero en realidad no.
14. Si intento medir las FP con los eventos PAPI_FP_INS y PAPI_FP_OPS me salta el error de que no existen dichos eventos. Si utilizo PAPI_VEC_SP, PAPI_VEC_DP, PAPI_SP_OPS o PAPI_DP_OPS salta el error: "Event exists, but cannot be counted due to counter resource limitations"
    PAPI_FP_INS (if not available PAPI tries to use PAPI_VEC_SP or PAPI_VEC_DP)
    PAPI_FP_OPS (if not available PAPI tries to use PAPI_SP_OPS or PAPI_DP_OPS)
15. Voy a probar el ejecutar código de C desde Python mediante cython.
    Parece MUY complicado: https://cython.readthedocs.io/en/latest/src/tutorial/clibraries.html

16. NOTA. Ya existe un proyecto que integra PAPI con Python: https://pypi.org/project/python_papi/

17. Quizás es más fácil con ctypes? https://docs.python.org/3.8/library/ctypes.html
-----------------------------
Primero hay que entender las diferencias entre static y dynamic (shared) libraries. Es decir: *.a y *.so

-----
18. Ya tengo un .so (librería dinamica/shared) con mis funciones que llama a papi. Ahora, tengo que intentar el binding con algún método.
19. Con ctypes es facil cargar la libreria y ejecutar sus funciones.
20. En el PC de sobremesa, tengo un intel i7-2600. Por tanto, pertenece a la familia de "Sandy Bridge".
    Por tanto, para medir las op. de fp hay que sumar:
    FP_COMP_OPS_EXE.SSE_SCALAR_SINGLE + 4 * FP_COMP_OPS_EXE.SSE_PACKED_SINGLE + 8 * SIMD_FP_256.PACKED_SINGLE + FP_COMP_OPS_EXE.SSE_SCALAR_DOUBLE + 2 * FP_COMP_OPS_EXE.SSE_PACKED_DOUBLE + 4 * SIMD_FP_256.PACKED_DOUBLE + FP_COMP_OPS_EXE.X87












jlpadillas01@PH315-51:~/papi/src$ less papi_native_avail 
papi_native_avail: No existe el archivo o el directorio
jlpadillas01@PH315-51:~/papi/src$ papi_native_avail | less


jlpadillas01@PH315-51:~/papi/src/libpfm4/examples$ ./check_events FP_ARITH:SCALAR_DOUBLE FP_ARITH:SCALAR_SINGLE FP_ARITH:128B_PACKED_DOUBLE FP_ARITH:128B_PACKED_SINGLE FP_ARITH:256B_PACKED_DOUBLE FP_ARITH:256B_PACKED_SINGLE FP_ARITH:512B_PACKED_DOUBLE FP_ARITH:512B_PACKED_SINGLE
jlpadillas01@PH315-51:~/papi/src/libpfm4/examples$ ./check_events FP_ARITH:SCALAR_DOUBLE FP_ARITH:SCALAR_SINGLE FP_ARITH:128B_PACKED_DOUBLE FP_ARITH:128B_PACKED_SINGLE FP_ARITH:256B_PACKED_DOUBLE FP_ARITH:256B_PACKED_SINGLE FP_ARITH:512B_PACKED_DOUBLE FP_ARITH:512B_PACKED_SINGLE | grep Codes


jlpadillas01@PH315-51:~/papi/src/libpfm4/examples$ ./check_events 


cd /home/jlpadillas01/pmu-tools/
sysctl -w kernel.nmi_watchdog=0
./toplev.py --core C0 --no-desc -l3 taskset -c 0 python3 ../TFG/src/mat_mul.py
sysctl -w kernel.nmi_watchdog=1

export PYTHONPATH=$PYTHONPATH:/usr/local/lib/python3.8/dist-packages

----------------


CFLAGS="-I/usr/local/otherdir/calg/include"  \
LDFLAGS="-L/usr/local/otherdir/calg/lib"     \
    python setup.py build_ext -i

----
For Broadwell based the formula will be following: FP_ARITH_INST_RETIRED.SCALAR_SINGLE + 4 * FP_ARITH_INST_RETIRED.128B_PACKED_SINGLE + 8 * FP_ARITH_INST_RETIRED.256B_PACKED_SINGLE + FP_ARITH_INST_RETIRED.SCALAR_DOUBLE + 2 * FP_ARITH_INST_RETIRED.128B_PACKED_DOUBLE + 4 * FP_ARITH_INST_RETIRED.256B_PACKED_DOUBLE + INST_RETIRED.X87

